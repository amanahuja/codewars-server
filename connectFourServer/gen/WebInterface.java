/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package connectFourServer.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class WebInterface {

  public interface Iface {

    public void setMode(int bid, int mode) throws TException;

    public void startGame(int bid) throws TException;

    public void makeMove(int bid, int move) throws TException;

    public void abortGame(int bid) throws TException;

    public String fetchResponse(int bid) throws TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void setMode(int bid, int mode) throws TException
    {
      send_setMode(bid, mode);
    }

    public void send_setMode(int bid, int mode) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setMode", TMessageType.CALL, seqid_));
      setMode_args args = new setMode_args();
      args.bid = bid;
      args.mode = mode;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void startGame(int bid) throws TException
    {
      send_startGame(bid);
    }

    public void send_startGame(int bid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("startGame", TMessageType.CALL, seqid_));
      startGame_args args = new startGame_args();
      args.bid = bid;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void makeMove(int bid, int move) throws TException
    {
      send_makeMove(bid, move);
    }

    public void send_makeMove(int bid, int move) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("makeMove", TMessageType.CALL, seqid_));
      makeMove_args args = new makeMove_args();
      args.bid = bid;
      args.move = move;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void abortGame(int bid) throws TException
    {
      send_abortGame(bid);
    }

    public void send_abortGame(int bid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("abortGame", TMessageType.CALL, seqid_));
      abortGame_args args = new abortGame_args();
      args.bid = bid;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String fetchResponse(int bid) throws TException
    {
      send_fetchResponse(bid);
      return recv_fetchResponse();
    }

    public void send_fetchResponse(int bid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchResponse", TMessageType.CALL, seqid_));
      fetchResponse_args args = new fetchResponse_args();
      args.bid = bid;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_fetchResponse() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      fetchResponse_result result = new fetchResponse_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchResponse failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("setMode", new setMode());
      processMap_.put("startGame", new startGame());
      processMap_.put("makeMove", new makeMove());
      processMap_.put("abortGame", new abortGame());
      processMap_.put("fetchResponse", new fetchResponse());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class setMode implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setMode_args args = new setMode_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.setMode(args.bid, args.mode);
        return;
      }
    }

    private class startGame implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        startGame_args args = new startGame_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.startGame(args.bid);
        return;
      }
    }

    private class makeMove implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        makeMove_args args = new makeMove_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.makeMove(args.bid, args.move);
        return;
      }
    }

    private class abortGame implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        abortGame_args args = new abortGame_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.abortGame(args.bid);
        return;
      }
    }

    private class fetchResponse implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchResponse_args args = new fetchResponse_args();
        args.read(iprot);
        iprot.readMessageEnd();
        fetchResponse_result result = new fetchResponse_result();
        result.success = iface_.fetchResponse(args.bid);
        oprot.writeMessageBegin(new TMessage("fetchResponse", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class setMode_args implements TBase<setMode_args._Fields>, java.io.Serializable, Cloneable, Comparable<setMode_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("setMode_args");

    private static final TField BID_FIELD_DESC = new TField("bid", TType.I32, (short)1);
    private static final TField MODE_FIELD_DESC = new TField("mode", TType.I32, (short)2);

    public int bid;
    public int mode;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      BID((short)1, "bid"),
      MODE((short)2, "mode");

      private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byId.put((int)field._thriftId, field);
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        return byId.get(fieldId);
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __MODE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
      put(_Fields.BID, new FieldMetaData("bid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      put(_Fields.MODE, new FieldMetaData("mode", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(setMode_args.class, metaDataMap);
    }

    public setMode_args() {
    }

    public setMode_args(
      int bid,
      int mode)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.mode = mode;
      setModeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMode_args(setMode_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.bid = other.bid;
      this.mode = other.mode;
    }

    public setMode_args deepCopy() {
      return new setMode_args(this);
    }

    @Deprecated
    public setMode_args clone() {
      return new setMode_args(this);
    }

    public int getBid() {
      return this.bid;
    }

    public setMode_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bit_vector.clear(__BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been asigned a value) and false otherwise */
    public boolean isSetBid() {
      return __isset_bit_vector.get(__BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bit_vector.set(__BID_ISSET_ID, value);
    }

    public int getMode() {
      return this.mode;
    }

    public setMode_args setMode(int mode) {
      this.mode = mode;
      setModeIsSet(true);
      return this;
    }

    public void unsetMode() {
      __isset_bit_vector.clear(__MODE_ISSET_ID);
    }

    /** Returns true if field mode is set (has been asigned a value) and false otherwise */
    public boolean isSetMode() {
      return __isset_bit_vector.get(__MODE_ISSET_ID);
    }

    public void setModeIsSet(boolean value) {
      __isset_bit_vector.set(__MODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((Integer)value);
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          setMode((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return new Integer(getBid());

      case MODE:
        return new Integer(getMode());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case BID:
        return isSetBid();
      case MODE:
        return isSetMode();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMode_args)
        return this.equals((setMode_args)that);
      return false;
    }

    public boolean equals(setMode_args that) {
      if (that == null)
        return false;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_mode = true;
      boolean that_present_mode = true;
      if (this_present_mode || that_present_mode) {
        if (!(this_present_mode && that_present_mode))
          return false;
        if (this.mode != that.mode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setMode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setMode_args typedOther = (setMode_args)other;

      lastComparison = Boolean.valueOf(isSetBid()).compareTo(isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(bid, typedOther.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetMode()).compareTo(isSetMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        _Fields fieldId = _Fields.findByThriftId(field.id);
        if (fieldId == null) {
          TProtocolUtil.skip(iprot, field.type);
        } else {
          switch (fieldId) {
            case BID:
              if (field.type == TType.I32) {
                this.bid = iprot.readI32();
                setBidIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, field.type);
              }
              break;
            case MODE:
              if (field.type == TType.I32) {
                this.mode = iprot.readI32();
                setModeIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, field.type);
              }
              break;
          }
          iprot.readFieldEnd();
        }
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BID_FIELD_DESC);
      oprot.writeI32(this.bid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeI32(this.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMode_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mode:");
      sb.append(this.mode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class startGame_args implements TBase<startGame_args._Fields>, java.io.Serializable, Cloneable, Comparable<startGame_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("startGame_args");

    private static final TField BID_FIELD_DESC = new TField("bid", TType.I32, (short)1);

    public int bid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      BID((short)1, "bid");

      private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byId.put((int)field._thriftId, field);
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        return byId.get(fieldId);
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
      put(_Fields.BID, new FieldMetaData("bid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(startGame_args.class, metaDataMap);
    }

    public startGame_args() {
    }

    public startGame_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startGame_args(startGame_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.bid = other.bid;
    }

    public startGame_args deepCopy() {
      return new startGame_args(this);
    }

    @Deprecated
    public startGame_args clone() {
      return new startGame_args(this);
    }

    public int getBid() {
      return this.bid;
    }

    public startGame_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bit_vector.clear(__BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been asigned a value) and false otherwise */
    public boolean isSetBid() {
      return __isset_bit_vector.get(__BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bit_vector.set(__BID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return new Integer(getBid());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startGame_args)
        return this.equals((startGame_args)that);
      return false;
    }

    public boolean equals(startGame_args that) {
      if (that == null)
        return false;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startGame_args typedOther = (startGame_args)other;

      lastComparison = Boolean.valueOf(isSetBid()).compareTo(isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(bid, typedOther.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        _Fields fieldId = _Fields.findByThriftId(field.id);
        if (fieldId == null) {
          TProtocolUtil.skip(iprot, field.type);
        } else {
          switch (fieldId) {
            case BID:
              if (field.type == TType.I32) {
                this.bid = iprot.readI32();
                setBidIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, field.type);
              }
              break;
          }
          iprot.readFieldEnd();
        }
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BID_FIELD_DESC);
      oprot.writeI32(this.bid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startGame_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class makeMove_args implements TBase<makeMove_args._Fields>, java.io.Serializable, Cloneable, Comparable<makeMove_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("makeMove_args");

    private static final TField BID_FIELD_DESC = new TField("bid", TType.I32, (short)1);
    private static final TField MOVE_FIELD_DESC = new TField("move", TType.I32, (short)2);

    public int bid;
    public int move;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      BID((short)1, "bid"),
      MOVE((short)2, "move");

      private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byId.put((int)field._thriftId, field);
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        return byId.get(fieldId);
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __MOVE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
      put(_Fields.BID, new FieldMetaData("bid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      put(_Fields.MOVE, new FieldMetaData("move", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(makeMove_args.class, metaDataMap);
    }

    public makeMove_args() {
    }

    public makeMove_args(
      int bid,
      int move)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.move = move;
      setMoveIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeMove_args(makeMove_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.bid = other.bid;
      this.move = other.move;
    }

    public makeMove_args deepCopy() {
      return new makeMove_args(this);
    }

    @Deprecated
    public makeMove_args clone() {
      return new makeMove_args(this);
    }

    public int getBid() {
      return this.bid;
    }

    public makeMove_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bit_vector.clear(__BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been asigned a value) and false otherwise */
    public boolean isSetBid() {
      return __isset_bit_vector.get(__BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bit_vector.set(__BID_ISSET_ID, value);
    }

    public int getMove() {
      return this.move;
    }

    public makeMove_args setMove(int move) {
      this.move = move;
      setMoveIsSet(true);
      return this;
    }

    public void unsetMove() {
      __isset_bit_vector.clear(__MOVE_ISSET_ID);
    }

    /** Returns true if field move is set (has been asigned a value) and false otherwise */
    public boolean isSetMove() {
      return __isset_bit_vector.get(__MOVE_ISSET_ID);
    }

    public void setMoveIsSet(boolean value) {
      __isset_bit_vector.set(__MOVE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((Integer)value);
        }
        break;

      case MOVE:
        if (value == null) {
          unsetMove();
        } else {
          setMove((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return new Integer(getBid());

      case MOVE:
        return new Integer(getMove());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case BID:
        return isSetBid();
      case MOVE:
        return isSetMove();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeMove_args)
        return this.equals((makeMove_args)that);
      return false;
    }

    public boolean equals(makeMove_args that) {
      if (that == null)
        return false;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_move = true;
      boolean that_present_move = true;
      if (this_present_move || that_present_move) {
        if (!(this_present_move && that_present_move))
          return false;
        if (this.move != that.move)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(makeMove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      makeMove_args typedOther = (makeMove_args)other;

      lastComparison = Boolean.valueOf(isSetBid()).compareTo(isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(bid, typedOther.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetMove()).compareTo(isSetMove());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(move, typedOther.move);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        _Fields fieldId = _Fields.findByThriftId(field.id);
        if (fieldId == null) {
          TProtocolUtil.skip(iprot, field.type);
        } else {
          switch (fieldId) {
            case BID:
              if (field.type == TType.I32) {
                this.bid = iprot.readI32();
                setBidIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, field.type);
              }
              break;
            case MOVE:
              if (field.type == TType.I32) {
                this.move = iprot.readI32();
                setMoveIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, field.type);
              }
              break;
          }
          iprot.readFieldEnd();
        }
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BID_FIELD_DESC);
      oprot.writeI32(this.bid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOVE_FIELD_DESC);
      oprot.writeI32(this.move);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeMove_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("move:");
      sb.append(this.move);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class abortGame_args implements TBase<abortGame_args._Fields>, java.io.Serializable, Cloneable, Comparable<abortGame_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("abortGame_args");

    private static final TField BID_FIELD_DESC = new TField("bid", TType.I32, (short)1);

    public int bid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      BID((short)1, "bid");

      private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byId.put((int)field._thriftId, field);
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        return byId.get(fieldId);
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
      put(_Fields.BID, new FieldMetaData("bid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(abortGame_args.class, metaDataMap);
    }

    public abortGame_args() {
    }

    public abortGame_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortGame_args(abortGame_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.bid = other.bid;
    }

    public abortGame_args deepCopy() {
      return new abortGame_args(this);
    }

    @Deprecated
    public abortGame_args clone() {
      return new abortGame_args(this);
    }

    public int getBid() {
      return this.bid;
    }

    public abortGame_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bit_vector.clear(__BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been asigned a value) and false otherwise */
    public boolean isSetBid() {
      return __isset_bit_vector.get(__BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bit_vector.set(__BID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return new Integer(getBid());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof abortGame_args)
        return this.equals((abortGame_args)that);
      return false;
    }

    public boolean equals(abortGame_args that) {
      if (that == null)
        return false;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(abortGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      abortGame_args typedOther = (abortGame_args)other;

      lastComparison = Boolean.valueOf(isSetBid()).compareTo(isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(bid, typedOther.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        _Fields fieldId = _Fields.findByThriftId(field.id);
        if (fieldId == null) {
          TProtocolUtil.skip(iprot, field.type);
        } else {
          switch (fieldId) {
            case BID:
              if (field.type == TType.I32) {
                this.bid = iprot.readI32();
                setBidIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, field.type);
              }
              break;
          }
          iprot.readFieldEnd();
        }
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BID_FIELD_DESC);
      oprot.writeI32(this.bid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("abortGame_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchResponse_args implements TBase<fetchResponse_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchResponse_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchResponse_args");

    private static final TField BID_FIELD_DESC = new TField("bid", TType.I32, (short)1);

    public int bid;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      BID((short)1, "bid");

      private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byId.put((int)field._thriftId, field);
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        return byId.get(fieldId);
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
      put(_Fields.BID, new FieldMetaData("bid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(fetchResponse_args.class, metaDataMap);
    }

    public fetchResponse_args() {
    }

    public fetchResponse_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchResponse_args(fetchResponse_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.bid = other.bid;
    }

    public fetchResponse_args deepCopy() {
      return new fetchResponse_args(this);
    }

    @Deprecated
    public fetchResponse_args clone() {
      return new fetchResponse_args(this);
    }

    public int getBid() {
      return this.bid;
    }

    public fetchResponse_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bit_vector.clear(__BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been asigned a value) and false otherwise */
    public boolean isSetBid() {
      return __isset_bit_vector.get(__BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bit_vector.set(__BID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((Integer)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return new Integer(getBid());

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchResponse_args)
        return this.equals((fetchResponse_args)that);
      return false;
    }

    public boolean equals(fetchResponse_args that) {
      if (that == null)
        return false;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchResponse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchResponse_args typedOther = (fetchResponse_args)other;

      lastComparison = Boolean.valueOf(isSetBid()).compareTo(isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(bid, typedOther.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        _Fields fieldId = _Fields.findByThriftId(field.id);
        if (fieldId == null) {
          TProtocolUtil.skip(iprot, field.type);
        } else {
          switch (fieldId) {
            case BID:
              if (field.type == TType.I32) {
                this.bid = iprot.readI32();
                setBidIsSet(true);
              } else { 
                TProtocolUtil.skip(iprot, field.type);
              }
              break;
          }
          iprot.readFieldEnd();
        }
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BID_FIELD_DESC);
      oprot.writeI32(this.bid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchResponse_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchResponse_result implements TBase<fetchResponse_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchResponse_result>   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchResponse_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byId.put((int)field._thriftId, field);
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        return byId.get(fieldId);
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
      put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(fetchResponse_result.class, metaDataMap);
    }

    public fetchResponse_result() {
    }

    public fetchResponse_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchResponse_result(fetchResponse_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public fetchResponse_result deepCopy() {
      return new fetchResponse_result(this);
    }

    @Deprecated
    public fetchResponse_result clone() {
      return new fetchResponse_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public fetchResponse_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public void setFieldValue(int fieldID, Object value) {
      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    public Object getFieldValue(int fieldId) {
      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    public boolean isSet(int fieldID) {
      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchResponse_result)
        return this.equals((fetchResponse_result)that);
      return false;
    }

    public boolean equals(fetchResponse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchResponse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchResponse_result typedOther = (fetchResponse_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        _Fields fieldId = _Fields.findByThriftId(field.id);
        if (fieldId == null) {
          TProtocolUtil.skip(iprot, field.type);
        } else {
          switch (fieldId) {
            case SUCCESS:
              if (field.type == TType.STRING) {
                this.success = iprot.readString();
              } else { 
                TProtocolUtil.skip(iprot, field.type);
              }
              break;
          }
          iprot.readFieldEnd();
        }
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchResponse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
